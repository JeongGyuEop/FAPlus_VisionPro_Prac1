//*******************************************************************************
// Copyright (C) 2004-2010 Cognex Corporation
//
// Cognex Corporation의 약관 및 라이선스 계약에 따라, 이 소스 코드를 자유롭게
// 수정하고 사용할 수 있습니다. 단, 이 소프트웨어 및 수정된 소프트웨어는 Cognex
// 머신 비전 시스템과 함께 사용되는 경우에만 해당됩니다. 또한 Cognex는 이 
// 소프트웨어 사용에 대한 보증, 책임, 의무를 지지 않음을 인정해야 합니다.
//*******************************************************************************
//
// 이 샘플 프로그램은 특정 VisionPro 기능이나 기법을 가능한 한 간단한 방식으로
// 보여주기 위해 설계되었습니다. 완성된 애플리케이션의 프레임워크로 사용되는 것을
// 의도하지 않았으며, 오류 처리, 이벤트 처리, 리소스 정리, 반복성 등 상용 애플리케이션에
// 필요한 메커니즘이 포함되어 있지 않을 수 있습니다.
//*******************************************************************************

using System;
using System.Threading;
using System.Windows.Forms;
using Cognex.VisionPro;
using Cognex.VisionPro.Display;
using Cognex.VisionPro.Exceptions;

namespace TriggerMode
{
    public partial class TriggerModeForm : Form
    {
        private CogAcqFifoTool mTool; // 이미지 획득 툴
        private ICogAcqTrigger mTrigger; // 트리거 제어용 객체
        private bool StopAcquire; // 이미지 획득 중지 플래그
        private int numacqs; // 획득 이미지 수 카운트

        public TriggerModeForm()
        {
            InitializeComponent();
        }

        private void TriggerModeForm_Load(object sender, EventArgs e)
        {
            try
            {
                InitializeAcquisition(); // 이미지 획득 초기화
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                Application.Exit();
            }
        }

        private void InitializeAcquisition()
        {
            // 1단계 - 영상 포맷을 기본값으로 가지는 AcqFifo 툴 생성
            mTool = new CogAcqFifoTool();

            if (mTool.Operator == null)
                throw new CogAcqNoFrameGrabberException("프레임그래버가 존재하지 않거나 제대로 작동하지 않습니다.");

            ICogAcqFifo mAcqFifo = mTool.Operator;
            lblVideoFormat.Text = mAcqFifo.VideoFormat;
            lblBoardType.Text = mTool.Operator.FrameGrabber.Name;

            // 2단계 - 트리거 제어 객체 가져오기
            mTrigger = mTool.Operator.OwnedTriggerParams;
            if (mTrigger == null)
                throw new CogAcqNoFrameGrabberException("해당 보드는 트리거 모드를 지원하지 않습니다.");

            // 이미지 획득 완료 이벤트 핸들러 등록
            mTool.Operator.Complete += new CogCompleteEventHandler(Acq_Complete);

            // 노출 및 밝기 설정 (환경 조도에 따라 조정 필요)
            var exposure = mTool.Operator.OwnedExposureParams;
            var brightness = mTool.Operator.OwnedBrightnessParams;
            if (exposure != null)
                exposure.Exposure = 50; // 단위: ms
            if (brightness != null)
                brightness.Brightness = 0.9;

            optManual.Checked = true; // 초기 모드는 수동 트리거
        }

        private void Acq_Complete(object sender, CogCompleteEventArgs e)
        {
            if (InvokeRequired)
            {
                Invoke(new CogCompleteEventHandler(Acq_Complete), sender, e);
                return;
            }

            try
            {
                if (StopAcquire) return; // 중지 상태면 실행 중지

                int numReady, numPending;
                bool busy;
                CogAcqInfo info = new CogAcqInfo();
                mTool.Operator.GetFifoState(out numPending, out numReady, out busy);

                if (numReady > 0)
                {
                    CogDisplay1.Image = mTool.Operator.CompleteAcquireEx(info);
                    numacqs++;
                }

                // 수동 트리거일 경우 다음 이미지를 큐에 등록
                if (optManual.Checked)
                    mTool.Operator.StartAcquire();

                if (numacqs > 4)
                {
                    GC.Collect(); // 가비지 컬렉션 호출
                    numacqs = 0;
                }
            }
            catch (CogException ex)
            {
                MessageBox.Show(ex.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void optManual_CheckedChanged(object sender, EventArgs e)
        {
            // 수동 트리거 모드 설정
            mTrigger.TriggerEnabled = false;
            mTool.Operator.Flush();
            mTrigger.TriggerModel = CogAcqTriggerModelConstants.Manual;
            mTrigger.TriggerEnabled = true;
        }

        private void optAuto_CheckedChanged(object sender, EventArgs e)
        {
            // 하드웨어 자동 트리거 모드 설정
            mTrigger.TriggerEnabled = false;
            mTool.Operator.Flush();
            mTrigger.TriggerModel = CogAcqTriggerModelConstants.Auto;
            mTrigger.TriggerEnabled = true;
        }

        private void cmdRun_Click(object sender, EventArgs e)
        {
            try
            {
                if (cmdRun.Text == "Run")
                {
                    optManual.Enabled = false;
                    optAuto.Enabled = false;
                    mTrigger.TriggerEnabled = true;
                    StopAcquire = false;
                    mTool.Operator.Flush();

                    if (optManual.Checked)
                    {
                        mTool.Operator.StartAcquire();
                        mTool.Operator.StartAcquire();
                    }

                    cmdRun.Text = "Stop";
                }
                else
                {
                    mTrigger.TriggerEnabled = false;
                    optManual.Enabled = true;
                    optAuto.Enabled = true;
                    StopAcquire = true;
                    mTool.Operator.Flush();
                    cmdRun.Text = "Run";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                Application.Exit();
            }
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            StopAcquire = true;
            for (int i = 0; i < 10; i++)
            {
                Application.DoEvents();
                Thread.Sleep(1);
            }
        }
    }
}
